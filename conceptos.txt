
üß± 1. HTML SEM√ÅNTICO

HTML sem√°ntico mejora la accesibilidad y el SEO. Usa etiquetas con significado, en vez de <div> para todo.

üè∑Ô∏è Etiquetas clave

Etiqueta	Uso principal

<header>	Encabezado del sitio o secci√≥n  
<nav>	Navegaci√≥n principal  
<main>	Contenido principal  
<section>	Secciones tem√°ticas  
<article>	Contenido independiente  
<aside>	Info complementaria  
<footer>	Pie de p√°gina  ‚úÖ Buenas pr√°cticas

Evita usar <div> cuando una etiqueta sem√°ntica tiene m√°s sentido.

Usa alt, title, aria-* para accesibilidad.

Anida correctamente el contenido.


---

üéØ 2. SELECTORES EN CSS

Los selectores te permiten aplicar estilos a elementos HTML espec√≠ficos.

üîπ B√°sicos

{}  /* Todos los elementos */


div      {}  /* Por etiqueta /
#id      {}  / Por ID /
.class   {}  / Por clase */

üîπ Jerarqu√≠a / relaci√≥n

div p     {}  /* Todos los <p> dentro de div /
div > p   {}  / Solo hijos directos /
div + p   {}  / Hermano adyacente /
div ~ p   {}  / Hermanos posteriores */

üîπ Pseudo-clases

a:hover        {}  /* Al pasar el mouse /
input:focus    {}  / Cuando se enfoca /
li:first-child {}  / Primer hijo */

üîπ Pseudo-elementos

p::before     { content: "‚û§"; }  /* Agrega contenido antes /
p::first-line { color: red; }   / Modifica primera l√≠nea */


---

‚öñÔ∏è 3. ESPECIFICIDAD EN CSS

Determina qu√© estilo se aplica cuando hay conflicto.

Selector	Valor

Elemento	0,0,1
Clase .class	0,1,0
ID #id	1,0,0
Inline Style	1,0,0,0
!important	Gana siempre (√∫ltimo recurso)

‚úÖ Consejo: Usa clases para mantener el c√≥digo limpio y evite abusar de !important.


---

üß≠ 4. FLEXBOX (Dise√±o unidimensional)

Permite alinear elementos en filas o columnas f√°cilmente.

.container {
display: flex;
flex-direction: row; /* o column /
justify-content: center; / o space-between, etc. /
align-items: center;     / o stretch, flex-start */
}

¬øPara qu√© sirve?
‚û°Ô∏è Para alinear elementos horizontal y verticalmente sin usar float o margen.


---

üß± 5. CSS GRID (Dise√±o bidimensional)

Ideal para distribuir contenido en filas y columnas.

.container {
display: grid;
grid-template-columns: 1fr 1fr;
grid-template-rows: auto;
gap: 1rem;
}

¬øPara qu√© sirve?
‚û°Ô∏è Para organizar interfaces m√°s complejas (tarjetas, layouts, galer√≠as).


---

üì± 6. MEDIA QUERIES

Permiten adaptar el dise√±o seg√∫n el tama√±o de la pantalla.

@media (max-width: 768px) {
.container {
flex-direction: column;
}
}

¬øPara qu√© sirve?
‚û°Ô∏è Para que tu sitio sea responsivo y se vea bien en cualquier dispositivo.

Tama√±o	Uso

480px	M√≥viles
768px	Tablets
1024px	Laptops
1200px+	Desktops


---

‚ú® 7. TRANSICIONES Y ANIMACIONES

üé¨ Transiciones (cambios suaves)

.button {
transition: background-color 0.3s ease;
}

üîÑ Animaciones (movimiento continuo)

@keyframes mover {
0% { transform: translateX(0); }
100% { transform: translateX(100px); }
}

.elemento {
animation: mover 2s infinite alternate;
}

¬øPara qu√© sirve?
‚û°Ô∏è Mejora la experiencia visual sin usar JavaScript.


---

üåô 8. EJERCICIO: MODO CLARO Y OSCURO

<!DOCTYPE html>
<html lang="es">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Modo Claro/Oscuro</title>
  <link rel="stylesheet" href="estilos.css">
</head>
<body>
  <input type="checkbox" id="modo" />
  <label for="modo" class="switch">üåô / ‚òÄÔ∏è</label>

  <main>
    <h1>¬°Hola, Ang√©lica!</h1>
    <p>Este es un modo claro/oscuro sin usar JavaScript.</p>
  </main>
</body>
</html>

CSS
/* Estilos base */
body {
  margin: 0;
  padding: 0;
  font-family: sans-serif;
  background-color: #ffffff;
  color: #000000;
  transition: background-color 0.4s, color 0.4s;
}

main {
  padding: 2rem;
  text-align: center;
}

/* Ocultamos el checkbox */
#modo {
  display: none;
}

/* Estilo del bot√≥n/label */
.switch {
  position: fixed;
  top: 1rem;
  right: 1rem;
  background: #ddd;
  padding: 0.5rem 1rem;
  border-radius: 2rem;
  cursor: pointer;
  font-size: 1.2rem;
  user-select: none;
  box-shadow: 0 0 8px #ccc;
  transition: background 0.3s;
}

/* MODO OSCURO */
#modo:checked ~ main {
  background-color: #121212;
  color: #ffffff;
}

#modo:checked ~ .switch {
  background: #333;
  color: #fff;
}

---

üé† 9. CARRUSEL SENCILLO EN HTML & CSS

<div class="carousel">  
  <div class="carousel-track">  
    <img src="img1.jpg" alt="">  
    <img src="img2.jpg" alt="">  
    <img src="img3.jpg" alt="">  
  </div>  
</div>  .carousel {
width: 300px;
overflow: hidden;
}

.carousel-track {
display: flex;
animation: slide 9s infinite;
}

.carousel-track img {
width: 300px;
height: auto;
}

@keyframes slide {
0%   { transform: translateX(0); }
33%  { transform: translateX(-300px); }
66%  { transform: translateX(-600px); }
100% { transform: translateX(0); }
}

‚û°Ô∏è Explicaci√≥n: Las im√°genes se colocan en fila y se mueven horizontalmente con una animaci√≥n.


---

üõ†Ô∏è 10. OPTIMIZACI√ìN

Usa im√°genes .webp y compresi√≥n.

Aplica loading="lazy" para que carguen solo cuando se vean.

Usa variables CSS para consistencia.

Minifica CSS/JS en producci√≥n.




**ejemplo carrusel jhon:**
<!DOCTYPE html>
<html lang="es">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <link rel="stylesheet" href="styles.css">
  <title>Landing Page</title>

    <style>
        *{
        box-sizing: border-box;
        margin: 0;
        padding: 0;
        }




    body {
        font-family: sans-serif;
        margin: 0;
        padding: 0;
    }

    .carrusel {
        width: 100%;
        max-width: 400px;
        padding: 100px;
        margin: 30px auto;
        overflow: hidden;
        border-radius: 10px;
        box-shadow: 0 0 10px rgba(0,0,0,0.2);
    }

    .carrusel__contenido {
        display: flex;
        width: 400%;
        animation: slide 20s infinite;
    }

    .contenido__slide {
        width: 100%;
        flex-shrink: 0;
    }

    .contenido__slide img {
        width: 25%;
        display: block;
    }

    @keyframes slide {
        0%   { transform: translateX(0%); }
        25%  { transform: translateX(-100%); }ww
        50%  { transform: translateX(-200%); }
        75%  { transform: translateX(-300%); }
        100% { transform: translateX(0%); }
    }

    </style>
</head>

<body>

<div class="carrusel">

### **Propiedades CSS y lo que controlan**  
| **Propiedad** | **Descripci√≥n** |
|--------------|----------------|
| `width` | Define el ancho exacto de la pantalla o ventana. |
| `min-width` | Establece el ancho m√≠nimo para aplicar los estilos. |
| `max-width` | Establece el ancho m√°ximo para aplicar los estilos. |
| `height` | Define la altura exacta de la pantalla o ventana. |
| `min-height` | Establece la altura m√≠nima para aplicar los estilos. |
| `max-height` | Establece la altura m√°xima para aplicar los estilos. |
| `orientation` | Detecta si el dispositivo est√° en **portrait (vertical)** o **landscape (horizontal)**. |
| `aspect-ratio` | Relaci√≥n entre el ancho y alto (ej. **16/9** o **4/3**). |
| `resolution` | Densidad de p√≠xeles (ej. para **pantallas retina**, en **dpi** o **dppx**). |
| `prefers-color-scheme` | Detecta si el usuario prefiere **modo oscuro** o **modo claro**. |
| `pointer` | Detecta si el dispositivo usa un **puntero** (mouse, t√°ctil, etc.). |
| `hover` | Detecta si el dispositivo permite **hover** (pasar el mouse por encima). |
| `display-mode` | Detecta si el sitio est√° en **modo standalone, fullscreen o navegador**. |

---

### **Propiedades de posici√≥n en CSS**  
| **Propiedad** | **Descripci√≥n** |
|--------------|----------------|
| `position: static;` | Posici√≥n por defecto de todos los elementos. No acepta `top`, `left`, `right`, `bottom`. |
| `position: relative;` | Permite mover un elemento **en relaci√≥n con su posici√≥n original** sin afectar otros elementos. |
| `position: absolute;` | Se **saca del flujo normal** y se posiciona con respecto a su **ancestro posicionado** (`relative`, `absolute`, `fixed`). |
| `position: fixed;` | Se mantiene **fijo en la ventana**, no se mueve con el scroll. |
| `position: sticky;` | Se comporta **como `relative` hasta llegar a un umbral**, luego act√∫a como `fixed`. |

### **Propiedades relacionadas con la posici√≥n**  
| **Propiedad** | **Descripci√≥n** |
|--------------|----------------|
| `top, left, right, bottom` | Define la distancia desde el borde del elemento. Funciona con `relative`, `absolute`, `fixed`, y `sticky`. |
| `z-index` | Controla la superposici√≥n de elementos (mayor valor = m√°s adelante). |

---

### **Comparativa r√°pida de posici√≥n**  
| **Valor** | **Flujo** | **Referencia** | **Se mueve con scroll?** |
|-----------|---------|---------------|------------------|
| `static`  | ‚úÖ S√≠   | Normal        | ‚úÖ S√≠             |
| `relative`| ‚úÖ S√≠   | Su lugar      | ‚úÖ S√≠             |
| `absolute`| ‚ùå No   | Ancestro      | ‚úÖ S√≠             |
| `fixed`   | ‚ùå No   | Ventana       | ‚ùå No             |
| `sticky`  | üîÑ S√≠/No | Umbral        | üîÑ Depende        |
  <div class="carrusel__contenido">
    <div class="contenido__slide"><img src="https://i.ibb.co/4hjtRQF/calificaciones-1.png" alt="Slide 1"></div>
    <div class="contenido__slide"><img src="https://i.ibb.co/fVLcBrkk/calificaciones-2.png" alt="Slide 2"></div>
    <div class="contenido__slide"><img src="https://i.ibb.co/mVy212Zb/calificaciones-3.png" alt="Slide 3"></div>
    <div class="contenido__slide"><img src="https://i.ibb.co/0yfGGBCt/calificaciones-4.png" alt="Slide 3"></div>
 
  </div>
</div>
</body>
</html>




